%%
clc;
clear;
close all;
array = csvread('B.csv');
colorArray = array(:,4);
%plot(colorArray);
%hold on

%Assume window size of 20
ws = 20;

% Calculating average of window size, looping through the entire CSV file
% and smoothening out the graph
for i = 1: length(colorArray)-ws
    colorArrayAvg(i)= sum(colorArray(i:i+ws))/ws;
    %fprintf('%f \n', colorArrayAvg(i));
end
%plot(colorArrayAvg);
%hold on

% Calculating derivative of previously calculated averages
for i = 1:length(colorArrayAvg)-1
    colorDerivative(i) = abs(colorArrayAvg(i+1) - colorArrayAvg(i));
end

%plot(colorDerivative);
%hold on

%Smoothening derivative out, similar to what we did for colorArrayAvg
for i = 1: length(colorDerivative)-ws
    colorDerAvg(i)= sum(colorDerivative(i:i+ws))/ws;
    %fprintf('%f \n', colorArrayAvg(i));
end
%plot(colorDerAvg);
%hold off

% Find the peaks of the derivative, minimum distance between peaks = 10,
% minimum height for peak = 1

[pks,locs] = findpeaks(colorDerAvg, 'MinPeakDistance',10, 'MinPeakHeight', 1);

%g=sprintf("%d ", locs);
%fprintf("%s\n", g);

binary_str = ""; % string that will store the binary representation of data
index = 2; % start at 2 because we are comparing against previous value
total = sum(locs(1:length(locs))); % total area of all of the peaks (the whole graph)
%fprintf("%f\n", total);
%NOW HAVE TO DETERMINE THE WIDTH
% Loop through the array of peaks location using index

while (index <= length(locs))
    
    barWidth = locs(index) - locs(index-1); % width of a single bar
    %fprintf("bar width: %f\n", barWidth);
    ratio = barWidth / total * 100; % compare single bar to the whole graph
    %fprintf("%f\n", ratio);
    index = index + 1;

    %MAY NEED TO ADJUST THIS VALUE
    if (ratio < 1.0) %arbitrary value, but if ratio > 1.0, that means its a thin bar
        binary_str = append(binary_str, "1");
    else %otherwise, that means its a thick bar
        binary_str = append(binary_str, "3");
    end % the reason we use ratios here is because each graph is gonna have different values,
        % so can't use hardcoded comparisons or comparisons that would only work for 1 graph 
end

fprintf("Binary string: %s\n", binary_str);
% look up table
LOOKUPTABLE = [311113113 ;  %A
               113113113; %B
               313113111; %C
               111133113; %D
               311133111; %E
               113133111; %F
               111113313; %G
               311113311; %H
               113113311; %I
               111133311; %J
               311111133; %K
               113111133; %L
               313111131; %M
               111131133; %N
               311131131; %O
               113131131; %P
               111111333; %Q
               311111331; %R
               113111331; %S
               111131331; %T
               331111113; %U
               133111113; %V
               333111111; %W
               131131113; %X
               331131111; %Y
               133131111; %Z
               ]; 
           
CODE = str2num(binary_str); %turn string to number 
coor = find(LOOKUPTABLE == CODE); %compare number to lookuptable
Letter = char(64+coor); %
fprintf(Letter);

